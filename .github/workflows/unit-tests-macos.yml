# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Unit tests on MacOS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '*.cff'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '*.cff'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]
        architecture: [arm64]
        compiler: [clang]

    steps:
    - uses: actions/checkout@v4
    - uses: Bacondish2023/setup-googletest@v1
      with:
        tag: v1.14.0
        build-type: ${{env.BUILD_TYPE}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                                                -DBLAS_LIBRARIES=${{github.workspace}}/deps/lib/libblas.a \
                                                -DLAPACK_LIBRARIES=${{github.workspace}}/deps/lib/liblapack.a \
                                                -DBUILD_STATIC_LIBS=ON \
                                                -DBUILD_SHARED_LIBS=OFF .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --target run_unotest --config ${{env.BUILD_TYPE}} -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute unit tests
      run: ./run_unotest
