# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build with MSVC

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '*.cff'
      - '*.options'
      - 'uno_ampl-completion.bash'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '*.cff'
      - '*.options'
      - 'uno_ampl-completion.bash'
    
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        architecture: [x64, x86]
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: [Release, Debug]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment to compile C++ with MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} .

    - name: Build
      # Build your program with the given configuration
      run: nmake
